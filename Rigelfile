vars:
    distro: "jazzy"
    
    # Plugin definitions
    dockerfile_plugin: "rigel.plugins.core.DockerfilePlugin"
    buildx_plugin: "rigel.plugins.core.BuildXPlugin"
    compose_plugin: "rigel.plugins.core.ComposePlugin"
    skopeo_plugin: "rigel.plugins.core.SkopeoPlugin"
    test_plugin: "rigel.plugins.core.UnitTestPlugin"
    scout_plugin: "rigel.plugins.core.ScoutPlugin"
    cosign_plugin: "rigel.plugins.core.CosignPlugin"
    
    # Some neccessary environment variables
    REGISTRY_USERNAME: "robotair-io"
    DH_USERNAME: "abbanfahim"
    DISPLAY: ":1"

    # Image names
    image: "pyrobosim_demo"
    image_path: "{{ vars.REGISTRY_USERNAME }}/{{ vars.image }}"
    local_image_path: "localhost:5000/{{ vars.image_path }}"
    remote_image_path: "ghcr.io/{{ vars.image_path }}"

# Configure the ROS distro
application:
    distro: "{{ vars.distro }}"

# Login to the remote registry
providers:
    container_registry_provider_1:
        provider: "rigel.providers.core.ContainerRegistryProvider"
        with:
            server: "https://ghcr.io/robotair-io"
            username: "{{ vars.REGISTRY_USERNAME }}"
            password: "{{ vars.REGISTRY_PASSWORD }}"

jobs:
    # Generate docker file
    dockerfile:
        plugin: "{{ vars.dockerfile_plugin }}"
        with:
            command: "ros2 run pyrobosim_ros demo.py"
            compiler:
                name: "colcon"
            apt:
                - apt-utils
                - cmake 
                - ffmpeg 
                - libsm6 
                - libxext6
                - python3-pip
                - python3-tk
                - libegl1
                - libgl1-mesa-dev
                - libglu1-mesa-dev
                - "'^libxcb.*-dev'"
                - libx11-xcb-dev
                - libxi-dev
                - libxkbcommon-dev
                - libxkbcommon-x11-dev
                - libxrender-dev
            env:
                - name: "PDDLSTREAM_PATH"
                  value: "/home/rigeluser/ros_workspace/src/rigel-pyrobosim-demo/dependencies/pddlstream"
                - name: "PIP_BREAK_SYSTEM_PACKAGES"
                  value: 1
            docker_run:
                - command: >
                            mkdir -p $PDDLSTREAM_PATH &&
                            cd $PDDLSTREAM_PATH/.. &&
                            git clone https://github.com/caelan/pddlstream.git &&
                            cd pddlstream &&
                            touch COLCON_IGNORE &&
                            git submodule update --init --recursive &&
                            ./downward/build.py
            entrypoint:
                - "export PYTHONPATH=$PDDLSTREAM_PATH:$PYTHONPATH"

    local_registry:
        plugin: "{{ vars.compose_plugin }}"
        with:
            components:
                - name: "registry"
                  image: "registry:3.0.0"
                  publish:
                    - !!python/tuple [5000, 5000]

    build:
        plugin: "{{ vars.buildx_plugin }}"
        with:
            image: "{{ vars.local_image_path }}"
            tags:
                - "latest"
            push: True
            platforms:
                - "linux/amd64"

    push_to_remote:
        plugin: "{{ vars.skopeo_plugin }}"
        with:
            image: "quay.io/skopeo/stable:v1.19.0"
            docker_skopeo:
                command: "copy"
                args:
                - "docker://{{ vars.local_image_path }}"
                - "docker://{{ vars.remote_image_path }}"
                flags:
                    src-tls-verify: false
                    insecure-policy: ""
            runtime_settings:
                network: "host"

    test:
        plugin: "{{ vars.test_plugin }}"
        with:
            image: "{{ vars.local_image_path }}"
            tag: "latest"
            std_output: True
            compiler: "colcon"
            pip: "test/python_test_requirements.txt"
            before_script: "test/run_tests.bash"
            packages: ["pyrobosim_ros"]

    run-demo:
        plugin: "{{ vars.compose_plugin}}"
        with:
            components:
                - name: "demo"
                  image: "{{ vars.remote_image_path }}"
                  command: ["bash", "-l", "-c", "ros2 launch pyrobosim_ros demo.launch.py"]
                  envs:
                    DISPLAY: "{{ vars.DISPLAY }}"
                  volumes:
                    - !!python/tuple ["/tmp/.X11-unix", "/tmp/.X11-unix:rw"]

    run-demo-multirobot:
        plugin: "{{ vars.compose_plugin}}"
        with:
            components:
                - name: "demo"
                  image: "{{ vars.remote_image_path }}"
                  command: ["bash", "-l", "-c", "ros2 launch pyrobosim_ros demo_commands_multirobot.launch.py"]
                  envs:
                    DISPLAY: "{{ vars.DISPLAY }}"
                  volumes:
                    - !!python/tuple ["/tmp/.X11-unix", "/tmp/.X11-unix:rw"]

    scout-sbom:
        plugin: "{{ vars.scout_plugin }}"
        with:
            docker_scout:
                command: "sbom"
                args:
                    - "{{ vars.local_image_path }}"
                options:
                    format: "list"
            output_settings:
                output_to_file: True
                dir: "scout-output/"
                timestamp: True
                timestamp_format: "%d_%b_%Y"
            container_settings:
                dh_username: "{{ vars.DH_USERNAME }}"
                dh_password: "{{ vars.DH_PASSWORD }}"
                reg_username: "{{ vars.REGISTRY_USERNAME }}"
                reg_password: "{{ vars.REGISTRY_PASSWORD }}"

    scout-cves:
        plugin: "{{ vars.scout_plugin }}"
        with:
            docker_scout:
                command: "cves"
                args:
                    - "{{ vars.local_image_path }}"
            output_settings:
                output_to_file: True
                dir: "scout-output/"
                timestamp: True
                timestamp_format: "%d_%b_%Y"
            container_settings:
                dh_username: "{{ vars.DH_USERNAME }}"
                dh_password: "{{ vars.DH_PASSWORD }}"
                reg_username: "{{ vars.REGISTRY_USERNAME }}"
                reg_password: "{{ vars.REGISTRY_PASSWORD }}"
    
    cosign-generate-keys:
        plugin: "{{ vars.cosign_plugin }}"
        with:
            command: "generate-key-pair"
            options:
                output-key-prefix: "/keys/cosign"
            envs:
                COSIGN_PASSWORD: "{{ vars.COSIGN_PASSWORD }}"
            mounts:
                - 
                    source: "exampleKeys/"
                    target: "/keys/"

    cosign-sign:
        plugin: "{{ vars.cosign_plugin }}"
        with:
            command: "sign"
            args:
                - "{{ vars.local_image_path }}"
            options:
                y: True
                r: True
                registry-username: "{{ vars.REGISTRY_USERNAME }}"
                registry-password: "{{ vars.REGISTRY_PASSWORD }}"
                key: "keys/cosign.key"
            envs:
                COSIGN_PASSWORD: "{{ vars.COSIGN_PASSWORD }}"
            mounts:
                - 
                    source: "exampleKeys/"
                    target: "/keys/"

    cosign-verify:
        plugin: "{{ vars.cosign_plugin }}"
        with:
            command: "verify"
            args:
                - "{{ vars.local_image_path }}"
            options:
                key: "keys/cosign.pub"
                registry-username: "{{ vars.REGISTRY_USERNAME }}"
                registry-password: "{{ vars.REGISTRY_PASSWORD }}"
            envs:
                COSIGN_PASSWORD: "{{ vars.COSIGN_PASSWORD }}"
            mounts:
                -
                    source: "exampleKeys/"
                    target: "/keys/"

sequences:
    build-and-test:
        stages:
            - jobs:
                - "dockerfile"
                - "build"
                - "test"
    sign-and-verify:
        stages:
            - jobs:
                - "cosign-generate-keys"
                - "cosign-sign"
                - "cosign-verify"
    ci:
        stages:
            - jobs:
                - "dockerfile"
            - jobs:
                - "build"
                - "test"

                - "scout-sbom"
                - "scout-cves"
                
                - "cosign-generate-keys"
                - "cosign-sign"
                - "cosign-verify"

                - "push_to_remote"
              dependencies: ["local_registry"]
    